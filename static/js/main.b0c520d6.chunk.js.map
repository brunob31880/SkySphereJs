{"version":3,"sources":["components/Grid.js","components/Horizon.js","utils/unitUtils.js","utils/astroUtils.js","contexts/Skycontext.js","CameraControls.js","components/Stars.js","components/Constellations.js","components/Sky.js","components/SkyDome.js","ErrorBoundary.js","components/Sidebar.js","components/Header.js","App.js","index.js"],"names":["Grid","group","useRef","useEffect","dashMaterialRA","THREE","color","dashSize","gapSize","dashMaterialDEC","createCircleGeometry","radius","geometry","positions","Float32Array","i","theta","Math","PI","cos","sin","setAttribute","load","font","ra","circGeom","rotateZ","degToRad","rotateY","circ","computeLineDistances","layers","set","current","add","textGeom","String","size","height","curveSegments","bevelEnabled","textMaterial","textMesh","position","x","z","y","lookAt","dec","translateY","_jsx","ref","Horizon","meshRef","renderOrder","_jsxs","rotation","children","attach","args","side","transparent","opacity","depthWrite","degrees","hmsToRad","hours","minutes","seconds","hmsToDeg","dmsToRad","dmsToDeg","radToDeg","angleInRadians","equatorialToHorizontal","H","latitude","decRad","HRad","latRad","h","asin","azimuth","atan2","altitude","SkyContext","React","createContext","SkyProvider","_ref","_ref4","_useState","useState","_useState2","_slicedToArray","representation","setRepresentation","_useState3","_useState4","shownConstellations","setShownConstellations","_useState5","Date","_useState6","currentTime","setCurrentTime","_useState7","longitude","_useState8","location","setLocation","_useState9","_useState10","starsData","setStarsData","_useState11","_useState12","horizontalCoords","setHorizontalCoords","_useState13","_useState14","hipToIndex","_useState15","_useState16","maxShownMagnitude","setMaxShownMagnitude","_useState17","_useState18","constellationLines","setConstellationLines","_useState19","_useState20","isLoaded","setIsLoaded","R","navigator","geolocation","getCurrentPosition","coords","error","console","interval","setInterval","clearInterval","log","time","minAzimuth","Infinity","maxAzimuth","minAltitude","maxAltitude","newAltAzArray","newHorizontalCoords","raDec","forEach","LST","GST","UTC","getSiderealTime","raInDegrees","decInDegrees","hourAngle","lst","calculateHourAngle","_equatorialToHorizont","push","timeEnd","_objectSpread","altAzArray","Promise","all","fetch","concat","process","then","response","text","_ref2","_ref3","starsDataText","constellationLinesText","idents","minRA","maxRA","minDEC","maxDEC","lines","split","filter","line","startsWith","trim","hipparcosIds","newMagnitudes","raDecArray","presentHips","map","parseInt","sort","a","b","missingHips","Array","from","length","_","hip","includes","index","parts","hipNumber","raParts","part","parseFloat","decParts","apply","_toConsumableArray","mag","isNaN","Error","validMagnitudes","minMagnitude","min","maxMagnitude","max","identStars","starName","substring","endsWith","slice","vertices","magnitudes","parsedLines","abbreviation","abbreviationGroup","startStar","endStar","Provider","value","toggleShownConstellations","toggleRepresentation","_defineProperty","CameraControls","previousMousePosition","setPreviousMousePosition","isMouseDown","setIsMouseDown","_useThree","useContext","useThree","camera","gl","handleMouseMove","event","deltaX","offsetX","deltaY","offsetY","abs","horizontalRotation","setFromAxisAngle","quaternion","multiply","verticalRotation","canvas","domElement","addEventListener","removeEventListener","handleWheel","zoomChange","sign","zoom","clamp","updateProjectionMatrix","handleKeyDown","rotationAngle","code","rotateOnAxis","enable","window","handleMouseDown","button","handleMouseUp","_Fragment","Html","style","top","left","display","flexDirection","gap","width","toFixed","getWorldDirection","Stars","scene","_useContext","isDebugEnabled","setIsDebugEnabled","highlightedTextSpriteRef","starGroupRef","highlightedStarRef","raycaster","linePrecision","mouse","rayHelperRef","removeDebugRay","remove","highlightStar","star","circleGeometry","circleMaterial","circle","starPosition","object","attributes","vertex","fromBufferAttribute","copy","subVectors","normalize","textSprite","texture","spriteMaterial","sprite","scale","createTextSprite","document","createElement","ctx","getContext","fillStyle","fillText","createTextTexture","shaderMaterial","uniforms","starTexture","gradient","createRadialGradient","addColorStop","fillRect","needsUpdate","createStarTexture","vertexShader","fragmentShader","depthTest","blending","points","key","prev","onClick","clientWidth","clientHeight","setFromCamera","closestStarIndex","minDistance","rayOrigin","sphereCenter","intersectionPoint","rayDirection","sphereRadius","oc","dot","discriminant","t1","sqrt","t2","t","getIntersectionWithSphere","ray","direction","setDirection","origin","starPositions","distance","distanceTo","hipparcosId","Constellations","constellationGroupRef","child","material","startStarIndex","endStarIndex","startStarCoords","endStarCoords","setFromPoints","lineObj","Sky","SkyDome","Canvas","background","right","bottom","near","far","intensity","ErrorBoundary","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","hasError","errorInfo","_createClass","this","setState","whiteSpace","toString","componentStack","Component","Sidebar","sliderValue","setSliderValue","className","type","step","onChange","newMagnitude","target","Header","deviceType","offsetHours","getTimezoneOffset","toLocaleTimeString","App","getDeviceType","innerWidth","setDeviceType","handleResize","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b0c520d6.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nfunction Grid() {\n    const group = useRef();\n\n    useEffect(() => {\n        const segments = 64;\n        const numDivisions = 36;  // Par exemple, pour 36 divisions\n        const increment = 360 / numDivisions;\n\n        const dashMaterialRA = new THREE.LineDashedMaterial({\n            color: 0x00ff00,\n            dashSize: 10,\n            gapSize: 5\n        });\n\n        const dashMaterialDEC = new THREE.LineDashedMaterial({\n            color: 0x0000ff,\n            dashSize: 10,\n            gapSize: 5\n        });\n\n        const createCircleGeometry = (radius) => {\n            const geometry = new THREE.BufferGeometry();\n            const positions = new Float32Array((segments + 1) * 3);\n\n            for (let i = 0; i <= segments; i++) {\n                const theta = (i / segments) * Math.PI * 2;\n                positions[i * 3] = radius * Math.cos(theta);\n                positions[i * 3 + 1] = 0;\n                positions[i * 3 + 2] = radius * Math.sin(theta);\n            }\n\n            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            return geometry;\n        };\n        // Étape 1: Chargez une police\n        const fontLoader = new THREE.FontLoader();\n\n        fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n            for (let ra = 0; ra < 360; ra += increment) {\n                const circGeom = createCircleGeometry(1000);\n\n                // Tourner le cercle de 90 degrés autour de l'axe Z pour le positionner dans le plan YZ.\n                circGeom.rotateZ(THREE.MathUtils.degToRad(90));\n\n                // Ensuite, tourner la géométrie autour de l'axe Y par ra degrés.\n                circGeom.rotateY(THREE.MathUtils.degToRad(ra));\n\n                const circ = new THREE.Line(circGeom, dashMaterialRA);\n                circ.computeLineDistances();\n                // Pour le raycasting\n                circ.layers.set(1);\n                group.current.add(circ);\n                // Étape 2: Créez une TextGeometry pour chaque valeur de 'ra'\n                const textGeom = new THREE.TextGeometry(String(ra), {\n                    font: font,\n                    size: 40,  // Ajustez selon vos besoins\n                    height: 5, // Ajustez selon vos besoins\n                    curveSegments: 12,\n                    bevelEnabled: false,\n                });\n\n                // Étape 3: Positionnez le texte sur la sphère\n                const textMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });  // Couleur du texte, ajustez selon vos besoins\n                const textMesh = new THREE.Mesh(textGeom, textMaterial);\n\n                const radius = 1000;\n                textMesh.position.x = radius * Math.cos(THREE.MathUtils.degToRad(ra));\n                textMesh.position.z = radius * Math.sin(THREE.MathUtils.degToRad(ra));\n                textMesh.position.y = 0;\n\n                textMesh.lookAt(0, 0, 0);  // Faites en sorte que le texte regarde vers le centre de la sphère\n                group.current.add(textMesh);\n            }\n\n\n            for (let dec = -90; dec < 90; dec += increment) {\n                const circGeom = createCircleGeometry(1000 * Math.cos(THREE.MathUtils.degToRad(dec)));\n                const circ = new THREE.Line(circGeom, dashMaterialDEC);\n                circ.translateY(1000 * Math.sin(THREE.MathUtils.degToRad(dec)));\n                circ.computeLineDistances();\n                // Pour le raycasting\n                circ.layers.set(1);\n                group.current.add(circ);\n                // Étape 2: Créez une TextGeometry pour chaque valeur de 'dec'\n                const textGeom = new THREE.TextGeometry(String(dec), {\n                    font: font,\n                    size: 40,  // Taille du texte, ajustez selon vos besoins\n                    height: 5, // Profondeur du texte, ajustez selon vos besoins\n                    curveSegments: 12,\n                    bevelEnabled: false,\n                });\n\n                // Étape 3: Positionnez le texte sur la sphère\n                const textMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });  // Couleur du texte, ajustez selon vos besoins\n                const textMesh = new THREE.Mesh(textGeom, textMaterial);\n\n                const radius = 1000;\n                textMesh.position.x = radius *  Math.cos(THREE.MathUtils.degToRad(dec));\n                textMesh.position.y = radius * Math.sin(THREE.MathUtils.degToRad(dec));\n                textMesh.position.z = 0\n\n                textMesh.lookAt(0, 0, 0);  // Faites en sorte que le texte regarde vers le centre de la sphère\n                group.current.add(textMesh);\n            }\n\n        })\n    }, []);\n\n    return <group ref={group} />;\n}\n\nexport default Grid;\n","import React,{useRef,useEffect} from 'react';\nimport * as THREE from 'three';\n\nfunction Horizon() {\n    const meshRef = useRef();\n\n    useEffect(() => {\n        if (meshRef.current) {\n            meshRef.current.renderOrder = 1; // Assurez-vous que c'est un numéro plus élevé que les autres objets de votre scène\n        }\n    }, []);\n    const radius=1000;\n    const segments =64;\n    return (\n        <mesh ref={meshRef} rotation={[-Math.PI / 2, 0, 0]}>\n            <ringBufferGeometry attach=\"geometry\" args={[0, radius, segments]} />\n            <meshBasicMaterial \n                attach=\"material\" \n                color={0xffffff} \n                side={THREE.DoubleSide} \n                transparent={true} \n                opacity={0.1}\n                depthWrite={false} // Ajout de cette ligne\n            />\n        </mesh>\n    );\n}\n\nexport default Horizon;\n","const degToRad = (degrees) => {\n    return degrees * (Math.PI / 180);\n}\n\nconst hmsToDeg = (hours, minutes, seconds) => {\n    return 15 * (hours + minutes / 60 + seconds / 3600);\n}\n\nconst dmsToDeg = (degrees, minutes, seconds) => {\n    return degrees + minutes / 60 + seconds / 3600;\n}\n\nconst hmsToRad = (hours, minutes, seconds) => {\n    return degToRad(hmsToDeg(hours, minutes, seconds));\n}\n\nconst dmsToRad = (degrees, minutes, seconds) => {\n    return degToRad(dmsToDeg(degrees, minutes, seconds));\n}\nfunction radToDeg(angleInRadians) {\n    return angleInRadians * (180 / Math.PI);\n}\n\nexport { radToDeg,degToRad, hmsToDeg, dmsToDeg, hmsToRad, dmsToRad };\n","\nimport { degToRad,radToDeg } from \"three/src/math/MathUtils\";\n/**\n * Calcule le temps sidéral local (LST) pour une longitude donnée.\n * \n * @param {number} longitude - La longitude en degrés pour laquelle le temps sidéral sera calculé.\n * @return {number} Le temps sidéral local (LST) en degrés.\n */\nexport function getSiderealTime(longitude) {\n    // Obtener la date et l'heure actuelles\n    const now = new Date();\n\n    // Calculer le nombre de jours écoulés depuis le début du J2000.0\n    const centuryStart = new Date(Date.UTC(2000, 0, 1, 12)); // 1er janvier 2000, 12h UT\n    const daysSinceJ2000 = (now - centuryStart) / (1000 * 60 * 60 * 24);\n\n    // Calculez le temps sidéral vert (GST) en utilisant une formule simplifiée\n    let GST = 280.16 + 360.9856235 * daysSinceJ2000;\n    GST = GST % 360; // Ramenez-le à l'intervalle [0, 360°]\n\n    // Convertir le GST en temps sidéral local (LST) en ajoutant la longitude\n    let LST = GST + longitude;\n    while (LST < 0) LST += 360;\n    while (LST > 360) LST -= 360;\n\n    return LST;\n}\n\n/**\n * Calcule l'heure angulaire d'un astre en fonction du temps sidéral local et de son ascension droite.\n * \n * @param {number} lst - Le temps sidéral local en degrés.\n * @param {number} ra - L'ascension droite de l'astre en degrés.\n * @return {number} L'heure angulaire en degrés.\n */\nexport function calculateHourAngle(lst, ra) {\n    let H = lst - ra;\n\n    // Ajustement pour s'assurer que H est dans l'intervalle [0, 360°] ou [0, -360°].\n    while (H >= 360) {\n        H -= 360;\n    }\n    while (H < 0) {\n        H += 360;\n    }\n\n    return H;\n}\n\n/**\n * Convertit des coordonnées équatoriales à horizontales.\n * \n * @param {number} dec - La déclinaison de l'astre en degrés.\n * @param {number} H - L'heure angulaire en degrés.\n * @param {number} latitude - La latitude de l'observateur en degrés.\n * @return {object} Un objet contenant les coordonnées horizontales : azimut (en radian) et altitude (en radian).\n */\nexport const equatorialToHorizontal = (dec, H, latitude) => {\n    // Convert all angles to radians\n    const decRad = degToRad(dec);\n    const HRad = degToRad(H);\n    const latRad = degToRad(latitude);\n  \n    // Calculate altitude (h)\n    const h = Math.asin(Math.sin(latRad) * Math.sin(decRad) + Math.cos(latRad) * Math.cos(decRad) * Math.cos(HRad));\n    \n    // Calculate azimuth (A) using the formula you provided\n    const A = Math.atan2(-Math.cos(decRad) * Math.cos(latRad) * Math.sin(HRad), Math.sin(decRad) - Math.sin(latRad) * Math.sin(h));\n  \n\n    return {\n      azimuth: A,\n      altitude: h\n    };\n  };\n\n","// SkyContext.js\nimport React, { useState, useEffect } from 'react';\nimport { radToDeg,hmsToRad, dmsToRad } from '../utils/unitUtils';\nimport { getSiderealTime, equatorialToHorizontal, calculateHourAngle } from '../utils/astroUtils'\nconst SkyContext = React.createContext();\n\nfunction SkyProvider({ children }) {\n    const [representation, setRepresentation] = useState(\"Equatorial\");\n    const [shownConstellations, setShownConstellations] = useState(\"Oui\");\n    const [currentTime, setCurrentTime] = useState(new Date());\n    const [location, setLocation] = useState({ latitude: null, longitude: null });\n    const [starsData, setStarsData] = useState(null);\n    const [horizontalCoords, setHorizontalCoords] = useState(null);\n    const [hipToIndex, setHipToIndex] = useState({});\n    const [maxShownMagnitude, setMaxShownMagnitude] = useState(6);\n    const [constellationLines, setConstellationLines] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const R = 1000; // Rayon de la sphère céleste\n\n    const toggleRepresentation = () => {\n        if (representation === 'Equatorial') {\n            setRepresentation('Horizontal');\n        } else {\n            setRepresentation('Equatorial');\n        }\n    };\n\n    const toggleShownConstellations = () => {\n        if (shownConstellations === \"Oui\") {\n            setShownConstellations(\"Non\");\n        } else {\n            setShownConstellations(\"Oui\");\n        }\n    };\n\n    useEffect(() => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                setLocation({\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude\n                });\n            }, error => {\n                console.error(\"Erreur de géolocalisation:\", error);\n            });\n        } else {\n            console.error(\"Géolocalisation non supportée par ce navigateur.\");\n        }\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCurrentTime(new Date());\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    const parseDMS = (dms) => {\n        const parts = dms.split(/\\s+/);\n        return parts.map(part => parseFloat(part));\n    };\n\n    const parseHMS = (hms) => {\n        const parts = hms.split(/\\s+/);\n        return parts.map(part => parseFloat(part));\n    };\n\n    useEffect(() => {\n        if (starsData && location.latitude && location.longitude) {\n            console.log(\"Calcul des coordonnées horizontales\");\n\n            // Démarrer le chronomètre\n            console.time(\"Calcul des coordonnées horizontales\");\n            let minAzimuth = Infinity;\n            let maxAzimuth = -Infinity;\n            let minAltitude = Infinity;\n            let maxAltitude = -Infinity;\n\n\n            const newAltAzArray = [];\n            const newHorizontalCoords = [];\n\n            starsData.raDec.forEach((raDec) => {\n                const { ra, dec } = raDec;\n                const LST = getSiderealTime(location.longitude);\n                const raInDegrees = radToDeg(ra);\n                const decInDegrees = radToDeg(dec);\n\n                const hourAngle = calculateHourAngle(LST, raInDegrees);\n                const { azimuth, altitude } = equatorialToHorizontal(decInDegrees, hourAngle, location.latitude);\n\n\n\n                // Mettre à jour les valeurs minimales et maximales\n                if (azimuth < minAzimuth) minAzimuth = azimuth;\n                if (azimuth > maxAzimuth) maxAzimuth = azimuth;\n                if (altitude < minAltitude) minAltitude = altitude;\n                if (altitude > maxAltitude) maxAltitude = altitude;\n\n                newAltAzArray.push({ azimuth, altitude }); // Stocker les valeurs d'azimuth et d'altitude\n\n                const x = R * Math.cos(altitude) * Math.cos(azimuth);\n                const z = R * Math.cos(altitude) * Math.sin(azimuth);\n                const y = R * Math.sin(altitude);\n\n                newHorizontalCoords.push(x, y, z);  // Ajouter les coordonnées en séquence\n            });\n\n            // Afficher les valeurs minimales et maximales pour le débogage\n            console.log(\"Azimuth Range:\", minAzimuth, \"-\", maxAzimuth);\n            console.log(\"Altitude Range:\", minAltitude, \"-\", maxAltitude);\n\n            // Arrêter le chronomètre et afficher le temps écoulé\n            console.timeEnd(\"Calcul des coordonnées horizontales\");\n\n            setHorizontalCoords(newHorizontalCoords);\n            setStarsData({\n                ...starsData,\n                horizontalCoords: newHorizontalCoords,\n                altAzArray: newAltAzArray  // Ajouter le nouveau tableau altAzArray au contexte\n            });\n        }\n    }, [isLoaded, location]);\n\n\n\n\n\n\n    useEffect(() => {\n        Promise.all([\n            fetch(`${process.env.PUBLIC_URL}/datas/hip.tsv`).then(response => response.text()),\n            fetch(`${process.env.PUBLIC_URL}/datas/constellation_line_hip.csv`).then(response => response.text()),\n            fetch(`${process.env.PUBLIC_URL}/datas/ident4.csv`).then(response => response.text())\n        ]).then(([starsDataText, constellationLinesText, idents]) => {\n            // Logique pour traiter starsDataText et constellationLinesText\n            // Traitement de starsDataText\n            let minRA = Infinity;\n            let maxRA = -Infinity;\n            let minDEC = Infinity;\n            let maxDEC = -Infinity;\n\n            const lines = starsDataText.split('\\n').filter(line => !line.startsWith('#') && line.trim() !== '');\n\n            const coords = [];\n            const hipparcosIds = [];\n            const newMagnitudes = [];\n            const raDecArray = [];\n\n            const RA_INDEX = 1;\n            const DEC_INDEX = 2;\n            const MAG_INDEX = 3;\n\n\n            // Créez une liste de tous les numéros HIP présents dans le fichier\n            const presentHips = lines.map(line => parseInt(line.split('|')[0])).sort((a, b) => a - b);\n\n            // Créez une liste complète de 1 à 118322\n            const allHips = Array.from({ length: 118322 }, (_, i) => i + 1);\n\n            // Trouvez les numéros HIP manquants\n            const missingHips = allHips.filter(hip => !presentHips.includes(hip));\n\n            console.log(\"Missing HIP numbers:\", missingHips);\n\n            lines.forEach((line, index) => {\n                const parts = line.split('|');\n                const hipNumber = parseInt(parts[0], 10);\n                hipToIndex[hipNumber] = index;\n                const raParts = parseHMS(parts[RA_INDEX]);\n                const decParts = parseDMS(parts[DEC_INDEX]);\n\n                const ra = hmsToRad(...raParts);\n                const dec = dmsToRad(...decParts);\n                const mag = parseFloat(parts[MAG_INDEX]);\n\n                if (ra < minRA) minRA = ra;\n                if (ra > maxRA) maxRA = ra;\n                if (dec < minDEC) minDEC = dec;\n                if (dec > maxDEC) maxDEC = dec;\n\n                if (!isNaN(mag)) {\n                    newMagnitudes.push(mag);\n                } else {\n                    console.error(\"Invalid magnitude value:\", parts[MAG_INDEX]);\n                }\n\n                const x = R * Math.cos(dec) * Math.cos(ra);\n                const z = R * Math.cos(dec) * Math.sin(ra);\n                const y = R * Math.sin(dec);\n\n                // pour deboggage affichage de la position de la polaire\n\n                if (hipNumber === 11767) console.log('Etoile polaire: X=' + x + \" Y=\" + y + \" Z=\" + z + \" \");\n                if (!isNaN(x) && !isNaN(y) && !isNaN(z)) {\n                    coords.push(x, y, z);\n                    hipparcosIds.push(hipNumber)\n                    raDecArray.push({ ra, dec });\n                } else {\n                    console.error(\"Problem with HIP=\" + parts[0]);\n                }\n\n                // Vérifier la taille des tableaux de données\n                if ((coords.length / 3) !== newMagnitudes.length) {\n                    console.error(\"Mismatch detected at line index:\", index);\n                    console.error(\"Line content:\", line);\n                    throw new Error(\"Mismatch in data arrays\"); // This will stop further processing\n                }\n            });\n\n\n            console.log(\"Nb étoiles:\" + newMagnitudes.length);\n            console.log(\"RA Range:\", minRA, \"-\", maxRA);\n            console.log(\"DEC Range:\", minDEC, \"-\", maxDEC);\n\n            // Vérifier la gamme de magnitudes\n            const validMagnitudes = newMagnitudes.filter(mag => !isNaN(mag));\n\n            const minMagnitude = Math.min(...validMagnitudes);\n            const maxMagnitude = Math.max(...validMagnitudes);\n            console.log(\"Magnitude Range:\", minMagnitude, \"-\", maxMagnitude);\n\n            const identStars = {};\n\n            // console.log(idents.split('\\n'))\n            const identLines = idents.split('\\n').filter(line => line.trim() !== '');\n            identLines.forEach(line => {\n                const parts = line.split('|');\n                let starName = parts[0].trim();\n                // Retire les guillemets en trop\n                if (starName.startsWith('\"')) {\n                    starName = starName.substring(1);\n                }\n                if (starName.endsWith('\"')) {\n                    starName = starName.substring(0, starName.length - 1);\n                }\n\n                const hipNumber = parseInt(parts[1].trim(), 10);\n\n                if (!isNaN(hipNumber)) {\n                    identStars[hipNumber] = starName;\n                }\n            });\n            console.log(\"Premières valeurs de raDecArray:\", raDecArray.slice(0, 10));\n\n            const starsData = {\n                vertices: coords,\n                magnitudes: newMagnitudes,\n                hipToIndex: hipToIndex,\n                hipparcosIds,\n                identStars,\n                raDec: raDecArray\n            };\n\n            // Stockez les données dans le contexte\n            setStarsData(starsData);\n            // Traitement de constellationLinesText\n            const constellationLines = constellationLinesText.split('\\n').filter(line => !line.startsWith('#') && line.trim() !== '');\n            const parsedLines = constellationLines.map(line => {\n                const parts = line.split(',');\n                return {\n                    abbreviation: parts[0],\n                    group: parts[1],\n                    abbreviationGroup: parts[2],\n                    startStar: parseInt(parts[3]),\n                    endStar: parseInt(parts[4])\n                };\n            });\n\n            setConstellationLines(parsedLines);\n            setIsLoaded(true);  // Mettre à jour isLoaded à true une fois que tout est chargé\n        });\n    }, []);\n\n    return (\n        <SkyContext.Provider value={{ isLoaded, shownConstellations, toggleShownConstellations, maxShownMagnitude, setMaxShownMagnitude, starsData, setStarsData, representation, setRepresentation, currentTime, location, toggleRepresentation, constellationLines, isLoaded, horizontalCoords, setHorizontalCoords }}>\n            {children}\n        </SkyContext.Provider>\n    );\n}\n\nexport { SkyContext, SkyProvider };\n","import { useThree, useFrame } from '@react-three/fiber';\nimport { useState, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { Html } from '@react-three/drei';\nimport { SkyContext } from './contexts/Skycontext';\nimport { useContext } from 'react';\n\nfunction CameraControls() {\n  const [previousMousePosition, setPreviousMousePosition] = useState({ x: 0, y: 0 });\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { isLoaded } = useContext(SkyContext);\n  const { camera, gl, size } = useThree();\n\n  useEffect(() => {\n    function handleMouseMove(event) {\n      if (!isMouseDown) return;\n\n      const sensitivity = 0.005;\n\n      const deltaX = (event.offsetX - previousMousePosition.x) * sensitivity;\n      const deltaY = (event.offsetY - previousMousePosition.y) * sensitivity;\n\n      // Vérifier quelle rotation (horizontale ou verticale) est la plus grande\n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        // Rotation horizontale seulement\n        console.log(\"Rotation horizontale\")\n        const horizontalRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), deltaX);\n        camera.quaternion.multiply(horizontalRotation);\n      } else {\n        // Rotation verticale seulement\n        console.log(\"Rotation verticale\")\n        const verticalRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), deltaY);\n        camera.quaternion.multiply(verticalRotation);\n      }\n\n      setPreviousMousePosition({ x: event.offsetX, y: event.offsetY });\n    }\n\n\n    const canvas = gl.domElement;\n    canvas.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      canvas.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [gl.domElement, camera, previousMousePosition, isMouseDown]);\n\n  useEffect(() => {\n    function handleWheel(event) {\n      const zoomStep = 0.25;\n      const zoomChange = - Math.sign(event.deltaY) * zoomStep;\n      camera.zoom += zoomChange;\n      camera.zoom = THREE.MathUtils.clamp(camera.zoom, 1, 10);\n      camera.updateProjectionMatrix();\n    }\n\n    const canvas = gl.domElement;\n    canvas.addEventListener('wheel', handleWheel);\n\n    return () => {\n      canvas.removeEventListener('wheel', handleWheel);\n    };\n  }, [gl.domElement, camera]);\n\n\n\n  useEffect(() => {\n\n    camera.layers.enable(0);  // permet à la caméra de voir la couche 0\n    camera.layers.enable(1);  // permet à la caméra de voir la couche 1\n\n    function handleKeyDown(event) {\n      const rotationAngle = 0.05;  // Ajustez cette valeur pour des rotations plus rapides ou plus lentes\n\n      switch (event.code) {\n        case 'ArrowUp':\n          camera.rotateOnAxis(new THREE.Vector3(1, 0, 0), rotationAngle);\n          break;\n        case 'ArrowDown':\n          camera.rotateOnAxis(new THREE.Vector3(1, 0, 0), -rotationAngle);\n          break;\n        case 'ArrowLeft':\n          camera.rotateOnAxis(new THREE.Vector3(0, 1, 0), rotationAngle);\n          break;\n        case 'ArrowRight':\n          camera.rotateOnAxis(new THREE.Vector3(0, 1, 0), -rotationAngle);\n          break;\n        default:\n          break;\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [camera]);\n\n  useEffect(() => {\n    function handleMouseDown(event) {\n      if (event.button === 0) {\n        setIsMouseDown(true);\n        setPreviousMousePosition({ x: event.offsetX, y: event.offsetY });\n      }\n    }\n\n    function handleMouseUp() {\n      setIsMouseDown(false);\n    }\n\n    const canvas = gl.domElement;\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [gl.domElement]);\n\n  useEffect(() => {\n    camera.position.set(0, 0, 0);\n    camera.lookAt(new THREE.Vector3(1, 0, 0));\n    camera.updateProjectionMatrix();\n  }, []);\n\n  return (\n    <>\n      <Html>\n        <div style={{\n          position: 'absolute',\n          top: -200,\n          left: -200,\n          color: 'white',\n          display: 'flex',\n          flexDirection: 'row',\n          gap: '20px',\n          width: '600px'\n        }}>\n          <span>Zoom: {camera.zoom.toFixed(2)}</span>\n          <span>Position: {camera.position.x.toFixed(2)}, {camera.position.y.toFixed(2)}, {camera.position.z.toFixed(2)}</span>\n          <span>LookAt: {camera.getWorldDirection(new THREE.Vector3()).x.toFixed(2)}, {camera.getWorldDirection(new THREE.Vector3()).y.toFixed(2)}, {camera.getWorldDirection(new THREE.Vector3()).z.toFixed(2)}</span>\n        </div>\n      </Html>\n    </>\n  );\n}\n\nexport default CameraControls;\n","import { useEffect, useRef, useContext, useState } from 'react';\n\nimport { useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { SkyContext } from '../contexts/Skycontext';\n/**\n * \n */\nfunction Stars() {\n    const { scene, camera, gl } = useThree();\n    const { shownConstellations, representation, maxShownMagnitude, starsData } = useContext(SkyContext);\n\n    const [isDebugEnabled, setIsDebugEnabled] = useState(false);\n\n    const highlightedTextSpriteRef = useRef(null);\n\n    const starGroupRef = useRef(new THREE.Group());\n    const highlightedStarRef = useRef(null);\n    const raycaster = new THREE.Raycaster();\n    raycaster.layers.set(0);\n    raycaster.linePrecision = 100;\n    const mouse = new THREE.Vector2();\n    const rayHelperRef = useRef(null);\n\n\n\n\n    useEffect(() => {\n        console.log(\"Debug=\" + isDebugEnabled)\n    }, [isDebugEnabled]);\n\n    function addDebugRay() {\n        if (!rayHelperRef.current) {\n            console.log(\"Recréation du rayHelper\");\n            rayHelperRef.current = new THREE.ArrowHelper(raycaster.ray.direction, raycaster.ray.origin, 1050, 0xff0000);\n            scene.add(rayHelperRef.current);\n        }\n        else {\n            console.log(\"Mise à jour de la direction du RayHelper\");\n            rayHelperRef.current.setDirection(raycaster.ray.direction);\n            rayHelperRef.current.position.copy(raycaster.ray.origin);\n        }\n    }\n\n    function removeDebugRay() {\n        if (rayHelperRef.current) {\n            scene.remove(rayHelperRef.current);\n            rayHelperRef.current = null;\n        }\n    }\n    /**\n     * \n     * @param {*} text \n     * @returns \n     */\n    function createTextTexture(text) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        ctx.font = '58px Arial'; // Modifiez selon vos préférences\n        ctx.fillStyle = \"blue\";\n        ctx.fillText(text, 0, 58);\n        const texture = new THREE.CanvasTexture(canvas);\n        return texture;\n    }\n    /**\n     * \n     * @param {*} texture \n     * @returns \n     */\n    function createTextSprite(texture) {\n        const spriteMaterial = new THREE.SpriteMaterial({ map: texture, color: 0x0000ff });\n        const sprite = new THREE.Sprite(spriteMaterial);\n        sprite.scale.set(200, 100, 1); // Ajustez la taille selon vos préférences\n        return sprite;\n    }\n    \n    useEffect(() => {\n        if (highlightedStarRef.current) {\n            console.log(\"Removing previously highlighted star.\");\n            starGroupRef.current.remove(highlightedStarRef.current);\n        }\n        if (highlightedTextSpriteRef.current) {\n            starGroupRef.current.remove(highlightedTextSpriteRef.current);\n        }\n    }, [shownConstellations]);\n    /**\n     * \n     * @param {*} star \n     */\n    function highlightStar(star) {\n        console.log(\"Highlight Star Function Called\");\n\n        if (highlightedStarRef.current) {\n            console.log(\"Removing previously highlighted star.\");\n            starGroupRef.current.remove(highlightedStarRef.current);\n        }\n\n        const circleGeometry = new THREE.RingGeometry(14, 24, 32);\n        const circleMaterial = new THREE.MeshBasicMaterial({ color: 0x0000FF, side: THREE.DoubleSide });\n        const circle = new THREE.Mesh(circleGeometry, circleMaterial);\n\n        // Get the star's (vertex) position from the Points geometry\n        const starPosition = star.object.geometry.attributes.position;\n        const vertex = new THREE.Vector3();\n        vertex.fromBufferAttribute(starPosition, star.index);\n        circle.position.copy(vertex);\n\n        console.log(\"Star Position:\", vertex);\n\n        // Calculate the direction from the camera to the star\n        const direction = new THREE.Vector3().subVectors(vertex, camera.position).normalize();\n\n        // Use the lookAt method to orient the circle towards the camera\n        circle.lookAt(camera.position);\n\n        starGroupRef.current.add(circle);\n        highlightedStarRef.current = circle;\n        // Récupérez le numéro Hipparcos de l'étoile\n        const hipNumber = starsData.hipparcosIds[star.index];\n        const starName = starsData.identStars[hipNumber];\n\n        if (starName) {\n            const textTexture = createTextTexture(starName);\n            const textSprite = createTextSprite(textTexture);\n\n            // Positionnez le sprite à côté du cercle\n            textSprite.position.copy(vertex);\n            textSprite.position.x -= 70;\n            textSprite.position.y -= 70;\n            // Ajoutez le sprite au groupe d'étoiles\n            starGroupRef.current.add(textSprite);\n\n            // Si un sprite précédent a été mis en évidence, retirez-le\n            if (highlightedTextSpriteRef.current) {\n                starGroupRef.current.remove(highlightedTextSpriteRef.current);\n            }\n            highlightedTextSpriteRef.current = textSprite;\n        }\n        else console.log(\"Can't find starname of \" + hipNumber);\n        console.log(\"Star has been highlighted!\");\n    }\n\n\n    useEffect(() => {\n        if (!starsData) return;\n\n        // Vider le groupe d'étoiles\n        while (starGroupRef.current.children.length > 0) {\n            starGroupRef.current.remove(starGroupRef.current.children[0]);\n        }\n\n        // Supprimer l'étoile mise en évidence si elle existe\n        if (highlightedStarRef.current) {\n            starGroupRef.current.remove(highlightedStarRef.current);\n            highlightedStarRef.current = null;\n        }\n\n        const geometry = new THREE.BufferGeometry();\n        let positions; // Ce tableau contiendra les coordonnées des étoiles\n\n        if (representation === 'Horizontal' && starsData.horizontalCoords) {\n            positions = starsData.horizontalCoords;\n        } else {\n            positions = starsData.vertices;\n        }\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n        geometry.setAttribute('magnitude', new THREE.Float32BufferAttribute(starsData.magnitudes, 1));\n        geometry.setAttribute('hipparcosId', new THREE.Float32BufferAttribute(starsData.hipparcosIds, 1));\n\n        function createStarTexture() {\n            const canvas = document.createElement('canvas');\n            canvas.width = 64;\n            canvas.height = 64;\n            const ctx = canvas.getContext('2d');\n\n            const gradient = ctx.createRadialGradient(32, 32, 8, 32, 32, 32);\n            gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            const texture = new THREE.Texture(canvas);\n            texture.needsUpdate = true;\n            return texture;\n        }\n\n        const shaderMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                starTexture: { value: createStarTexture() },\n                maxMagnitude: { value: maxShownMagnitude }\n            },\n            vertexShader: `\n                attribute float magnitude;\n                uniform float maxMagnitude;\n                varying float vMagnitude;\n                void main() {\n                    vMagnitude = magnitude;\n                    gl_PointSize = 1.0 + 19.0 * (1.0 - vMagnitude / maxMagnitude);\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n            fragmentShader: `\n                uniform sampler2D starTexture;\n                uniform float maxMagnitude;\n                varying float vMagnitude;\n                void main() {\n                    if (vMagnitude > maxMagnitude) {\n                        discard;\n                    }\n                    gl_FragColor = texture2D(starTexture, gl_PointCoord);\n                }\n            `,\n            transparent: true,\n            depthTest: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        });\n\n        while (starGroupRef.current.children.length > 0) {\n            starGroupRef.current.remove(starGroupRef.current.children[0]);\n        }\n\n        const points = new THREE.Points(geometry, shaderMaterial);\n        starGroupRef.current.add(points);\n\n\n\n\n        scene.add(starGroupRef.current);\n\n        return () => {\n            scene.remove(starGroupRef.current);\n        };\n\n\n    }, [representation, starsData, scene, maxShownMagnitude]);\n\n\n    useEffect(() => {\n        function handleKeyDown(event) {\n            // Par exemple, vérifiez si la touche 'D' est pressée :\n            if (event.key === 'd' || event.key === 'D') {\n                setIsDebugEnabled(prev => !prev);  // bascule le mode debug\n            }\n        }\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, []);\n\n    function getIntersectionWithSphere(rayOrigin, rayDirection, sphereCenter, sphereRadius) {\n        // Calcul des coefficients a, b et c pour l'équation quadratique\n        const oc = new THREE.Vector3().subVectors(rayOrigin, sphereCenter);\n\n        const a = rayDirection.dot(rayDirection);\n        const b = 2.0 * oc.dot(rayDirection);\n        const c = oc.dot(oc) - sphereRadius * sphereRadius;\n\n        const discriminant = b * b - 4 * a * c;\n\n        if (discriminant < 0) {\n            return null; // Pas d'intersection\n        } else {\n            // On utilise t1 comme point d'intersection car c'est le point le plus proche\n            const t1 = (-b - Math.sqrt(discriminant)) / (2.0 * a);\n            const t2 = (-b + Math.sqrt(discriminant)) / (2.0 * a);\n\n            // Si t1 est négatif, alors le début du rayon est à l'intérieur de la sphère\n            const t = t1 > 0 ? t1 : t2;\n\n            return new THREE.Vector3(\n                rayOrigin.x + t * rayDirection.x,\n                rayOrigin.y + t * rayDirection.y,\n                rayOrigin.z + t * rayDirection.z\n            );\n        }\n    }\n\n\n\n\n    useEffect(() => {\n        function onClick(event) {\n            console.log(\"Clic event \", event)\n            mouse.x = (event.offsetX / gl.domElement.clientWidth) * 2 - 1;\n            mouse.y = -(event.offsetY / gl.domElement.clientHeight) * 2 + 1;\n            raycaster.setFromCamera(mouse, camera);\n\n            let closestStarIndex = null;\n            let minDistance = Infinity;\n            const rayOrigin = new THREE.Vector3(0, 0, 0);    // Exemple d'origine  \n            const sphereCenter = new THREE.Vector3(0, 0, 0); // Exemple de centre\n            const sphereRadius = 1000;\n\n\n            const intersectionPoint = getIntersectionWithSphere(rayOrigin, raycaster.ray.direction.normalize(), sphereCenter, sphereRadius);\n            if (isDebugEnabled) addDebugRay();\n            else removeDebugRay();\n\n            if (intersectionPoint) {\n\n                console.log(`Intersection point: ${intersectionPoint.x}, ${intersectionPoint.y}, ${intersectionPoint.z}`);\n                let starPositions;\n                if (representation === 'Horizontal' && starsData.horizontalCoords) {\n                    starPositions = starsData.horizontalCoords;\n                } else {\n                    starPositions = starsData.vertices;\n                }\n                // Parcourir les étoiles visibles\n                for (let i = 0; i < starPositions.length / 3; i++) {\n                    if (starsData.magnitudes[i] <= maxShownMagnitude) {\n                        const starPosition = new THREE.Vector3(\n                            starPositions[i * 3],\n                            starPositions[i * 3 + 1],\n                            starPositions[i * 3 + 2]\n                        );\n                        const distance = starPosition.distanceTo(intersectionPoint);\n\n                        if (distance < minDistance) {\n                            minDistance = distance;\n                            closestStarIndex = i;\n                        }\n                    }\n                }\n\n                if (closestStarIndex !== null) {\n                    const hipparcosId = starsData.hipparcosIds[closestStarIndex];\n                    console.log(\"Etoile la plus proche Hipparcos ID:\", hipparcosId);\n\n                    // Mettez en surbrillance cette étoile\n                    const star = {\n                        object: {\n                            geometry: {\n                                attributes: {\n                                    position: new THREE.BufferAttribute(new Float32Array(starPositions), 3),\n                                    hipparcosId: new THREE.BufferAttribute(new Float32Array(starsData.hipparcosIds), 1)\n                                }\n                            }\n                        },\n                        index: closestStarIndex\n                    };\n                    highlightStar(star);\n                }\n\n            } else {\n                console.log(\"No intersection\");\n            }\n\n\n        }\n\n        window.addEventListener('click', onClick);\n\n        return () => {\n            window.removeEventListener('click', onClick);\n            removeDebugRay();\n        };\n    }, [representation, starsData, camera, gl, isDebugEnabled]);\n\n    return null;\n}\n\nexport default Stars;\n","import { useEffect, useRef, useContext } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { SkyContext } from '../contexts/Skycontext';\n/**\n * \n * @param {*} param0 \n * @returns \n */\nfunction Constellations() {\n    const { scene } = useThree();\n    const { representation, starsData, constellationLines } = useContext(SkyContext);\n\n    // Créez une référence pour le groupe\n    const constellationGroupRef = useRef(new THREE.Group());\n    useEffect(() => {\n        if (!starsData || !constellationLines) return;\n\n        // Nettoyer le groupe avant de l'ajouter à nouveau\n        constellationGroupRef.current.children.forEach(child => {\n            console.log(\"Suppression de \", child);\n            constellationGroupRef.current.remove(child);\n        });\n        scene.remove(constellationGroupRef.current);\n        const material = new THREE.LineBasicMaterial({ color: 0xFFFFFF });\n\n        // Définir la variable positions en fonction de la représentation\n        const positions = representation === 'Horizontal' && starsData.horizontalCoords ? starsData.horizontalCoords : starsData.vertices;\n\n        constellationLines.forEach(line => {\n            const startStarIndex = starsData.hipToIndex[line.startStar] * 3;\n            const endStarIndex = starsData.hipToIndex[line.endStar] * 3;\n\n            const startStarCoords = new THREE.Vector3(\n                positions[startStarIndex],\n                positions[startStarIndex + 1],\n                positions[startStarIndex + 2]\n            );\n\n            const endStarCoords = new THREE.Vector3(\n                positions[endStarIndex],\n                positions[endStarIndex + 1],\n                positions[endStarIndex + 2]\n            );\n\n            const geometry = new THREE.BufferGeometry().setFromPoints([startStarCoords, endStarCoords]);\n            const lineObj = new THREE.Line(geometry, material);\n            constellationGroupRef.current.add(lineObj);\n        });\n\n        scene.add(constellationGroupRef.current);\n\n        return () => {\n            // Supprimer tous les enfants du groupe\n            while (constellationGroupRef.current.children.length > 0) {\n                constellationGroupRef.current.remove(constellationGroupRef.current.children[0]);\n            } // Supprimer le groupe de la scène\n            scene.remove(constellationGroupRef.current);\n        };\n\n    }, [starsData, scene, constellationLines, representation]);\n\n\n    return null;\n}\n\nexport default Constellations;\n","import React, { useEffect,useContext } from 'react';\nimport Stars from './Stars';\nimport Constellations from './Constellations';\nimport * as THREE from 'three';\nimport { SkyContext } from '../contexts/Skycontext';\n/**\n * \n * @param {*} param0 \n * @returns \n */\nfunction Sky() {\n    const { shownConstellations,representation,location } = useContext(SkyContext);\n\n    useEffect(() => {\n        console.log(\"Changement de Representation\")      \n    }, [representation, location]);\n\n    useEffect(() => {\n        console.log(\"Changement de Location\")   \n    }, [location]);\n\n    return (\n        <>\n            {/* Affiche les étoiles. */}\n            <Stars/>\n            {/* Affiche les constellations. */}\n            {shownConstellations===\"Oui\" && <Constellations/>}\n        </>\n    );\n}\n\nexport default Sky;\n","import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport Grid from './Grid';\nimport Horizon from './Horizon';\nimport CameraControls from '../CameraControls';\nimport Sky from './Sky';\n\n/*\nEn ce qui concerne les directions des axes dans Three.js:\n\nL'axe X est dirigé vers la droite.\nL'axe Y est dirigé vers le haut.\nL'axe Z est dirigé en avant, hors de l'écran.\nDonc, dans votre configuration:\n\nL'axe X (rouge dans axesHelper) pointe vers la droite.\nL'axe Y (vert dans axesHelper) pointe vers le haut.\nL'axe Z (bleu dans axesHelper) pointe directement hors de l'écran vers vous.\nLorsque vous utilisez axesHelper, il affiche des lignes représentant ces axes dans ces couleurs. Le rouge est pour X, le vert pour Y, et le bleu pour Z.\n*/\nfunction SkyDome() {\n    return (\n        <Canvas style={{ background: '#001122' }} >\n            <orthographicCamera position={[0, 0, 0]} left={-1500} right={1500} top={1500} bottom={-1500} near={0.1} far={1500} />\n            \n            {/* Afficher le ciel nocturne. */}\n            <Sky />\n\n            {/* Affiche l'horizon. */}\n            <Horizon />\n\n            {/* Affiche la grille. */}\n            <Grid />\n\n            {/* Affiche les aides pour les axes. */}\n            <axesHelper args={[1000]} />\n\n            {/* Éclaire la scène avec une lumière ambiante. */}\n            <ambientLight intensity={0.5} />\n\n            {/* Ajoute une lumière directionnelle pointant vers la position spécifiée. */}\n            <directionalLight position={[0, 0, 5]} intensity={1} />\n\n            {/* Contrôles pour la caméra. */}\n            <CameraControls />\n        </Canvas>\n    );\n}\n\nexport default SkyDome;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null, errorInfo: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Mettez à jour l'état pour que le prochain rendu affiche le remplacement d'UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Vous pouvez également enregistrer l'erreur dans un service de reporting d'erreurs\n    console.error(\"Uncaught error:\", error, errorInfo);\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // Vous pouvez rendre n'importe quelle interface utilisateur de remplacement\n      return (\n        <div>\n          <h1>Quelque chose s'est mal passé.</h1>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n\n    // Si il n'y a pas d'erreur, renvoyer les enfants normalement\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useContext, useState } from 'react';\nimport './Sidebar.css';\nimport { SkyContext } from '../contexts/Skycontext';\n\nfunction Sidebar() {\n    const { maxShownMagnitude, setMaxShownMagnitude, representation, toggleRepresentation, shownConstellations, toggleShownConstellations } = useContext(SkyContext);\n\n    // Utilisation d'un état local pour suivre la valeur du curseur\n    const [sliderValue, setSliderValue] = useState(maxShownMagnitude);\n\n    const handleSliderChange = (event) => {\n        const newMagnitude = parseFloat(event.target.value);\n        setSliderValue(newMagnitude);\n        setMaxShownMagnitude(newMagnitude);\n    };\n   \n    return (\n        <div className=\"sidebar\">\n            <h2 className=\"representation-title\">{representation}</h2>\n            <button onClick={toggleRepresentation}>Basculer la représentation</button>\n            <h2 className=\"constellations-title\">Constellations: {shownConstellations}</h2>\n            <div\n                className={`toggle-btn ${shownConstellations === 'Oui' ? 'on' : 'off'}`}\n                onClick={toggleShownConstellations}\n            >\n                <div className=\"toggle-indicator\"></div>\n            </div>\n\n            <div className=\"magnitude-slider\">\n                <label>Magnitude maximale affichée: {sliderValue}</label>\n                <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"10\"\n                    step=\"0.1\"\n                    value={sliderValue}\n                    onChange={handleSliderChange}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Sidebar;\n","// Header.js\nimport React, { useContext } from 'react';\nimport './Header.css';\nimport { SkyContext } from '../contexts/Skycontext';\n\nfunction Header({deviceType}) {\n    const { currentTime, location } = useContext(SkyContext);\n    //console.log(\"Location: \", location)\n\n    const offsetMinutes = currentTime.getTimezoneOffset();\n    const offsetHours = offsetMinutes / 60;\n\n    return (\n        <div className=\"header\">\n          {deviceType !== \"mobile\" && <h1 className=\"header-title\">SkySphereJS</h1>}\n            <div className=\"right-section\">\n                <span className=\"location\">\n                    {location.latitude && location.longitude ?\n                        `Lat: ${location.latitude.toFixed(2)}, Long: ${location.longitude.toFixed(2)}` :\n                        \"Localisation non disponible\"}\n                </span>\n                <span className=\"time\"> {currentTime.toLocaleTimeString()} UTC {offsetHours >= 0 ? '+' : ''}{offsetHours}</span>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SkyDome from './components/SkyDome';\nimport ErrorBoundary from './ErrorBoundary';\nimport Sidebar from './components/Sidebar';\nimport Header from './components/Header';\nimport { SkyProvider } from './contexts/Skycontext';\n\nfunction App() {\n  const [deviceType, setDeviceType] = useState(getDeviceType(window.innerWidth));\n/**\n  * \n  * @param {*} width \n  * @returns \n  */\nfunction getDeviceType(width) {\n  console.log(\"Width=\"+width);\n  if (width < 768) {\n    return 'mobile';\n  } else if (width <= 1180) {\n    return 'tablette';\n  } else {\n    return 'ordinateur';\n  }\n}\nuseEffect(() => {\n  const handleResize = () => {\n    setDeviceType(getDeviceType(window.innerWidth));\n  };\n\n  window.addEventListener('resize', handleResize);\n  return () => {\n    window.removeEventListener('resize', handleResize);\n  };\n}, []);\n\n\n  return (\n    <div className={`App ${deviceType === \"mobile\" ? \"mobile\" : \"\"}`}>\n      <SkyProvider>\n        <ErrorBoundary>\n          <Header deviceType={deviceType} />\n          <div className=\"content\">\n            <SkyDome />\n          </div>\n          {deviceType !== \"mobile\" && <Sidebar />}\n        </ErrorBoundary>\n      </SkyProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n"],"sourceRoot":""}