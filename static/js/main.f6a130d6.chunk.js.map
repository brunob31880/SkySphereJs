{"version":3,"sources":["components/RADECGrid.js","components/Horizon.js","CameraControls.js","utils/unitUtils.js","contexts/Skycontext.js","components/Stars.js","components/Constellations.js","components/Sky.js","utils/astroUtils.js","components/SkyDome.js","ErrorBoundary.js","components/Sidebar.js","components/Header.js","App.js","index.js"],"names":["RADECGrid","group","useRef","useEffect","dashMaterialRA","THREE","color","dashSize","gapSize","dashMaterialDEC","createCircleGeometry","radius","geometry","positions","Float32Array","i","theta","Math","PI","cos","sin","setAttribute","ra","circGeom","rotateZ","degToRad","rotateY","circ","computeLineDistances","current","add","dec","translateY","_jsx","ref","Horizon","meshRef","renderOrder","_jsxs","rotation","children","attach","args","side","transparent","opacity","depthWrite","CameraControls","_useThree","useThree","camera","gl","_useState","useState","_useState2","_slicedToArray","lookAt","setLookAt","handleMouseMove","event","clientX","clientY","canvas","domElement","addEventListener","removeEventListener","OrbitControls","enableZoom","degrees","hmsToRad","hours","minutes","seconds","hmsToDeg","dmsToRad","dmsToDeg","SkyContext","React","createContext","SkyProvider","_ref","representation","setRepresentation","_useState3","_useState4","shownConstellations","setShownConstellations","_useState5","Date","_useState6","currentTime","setCurrentTime","_useState7","latitude","longitude","_useState8","location","setLocation","_useState9","_useState10","starsData","setStarsData","_useState11","_useState12","hipToIndex","_useState13","_useState14","maxShownMagnitude","setMaxShownMagnitude","_useState15","_useState16","constellationLines","setConstellationLines","R","navigator","geolocation","getCurrentPosition","position","coords","error","console","interval","setInterval","clearInterval","fetch","concat","process","then","response","text","data","minRA","Infinity","maxRA","minDEC","maxDEC","lines","split","filter","line","startsWith","trim","newMagnitudes","presentHips","map","parseInt","sort","a","b","missingHips","Array","from","length","_","hip","includes","log","forEach","index","parts","hipNumber","raParts","part","parseFloat","decParts","apply","_toConsumableArray","mag","isNaN","push","x","z","y","Error","validMagnitudes","minMagnitude","min","maxMagnitude","max","vertices","magnitudes","parsedLines","abbreviation","abbreviationGroup","startStar","endStar","Provider","value","toggleShownConstellations","toggleRepresentation","Stars","scene","_useContext","useContext","starGroupRef","shaderMaterial","uniforms","starTexture","document","createElement","width","height","ctx","getContext","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","texture","needsUpdate","createStarTexture","vertexShader","fragmentShader","depthTest","blending","remove","points","Constellations","constellationGroupRef","material","startStarIndex","endStarIndex","undefined","startStarCoords","endStarCoords","setFromPoints","Sky","setRotation","LST","GST","UTC","getSiderealTime","LSTinRadians","inclination","_Fragment","SkyDome","Canvas","style","background","left","right","top","bottom","near","far","intensity","ErrorBoundary","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","hasError","errorInfo","_createClass","key","this","setState","whiteSpace","toString","componentStack","Component","Sidebar","sliderValue","setSliderValue","className","onClick","type","step","onChange","newMagnitude","target","Header","deviceType","offsetHours","getTimezoneOffset","toFixed","toLocaleTimeString","App","getDeviceType","window","innerWidth","setDeviceType","handleResize","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f6a130d6.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nfunction RADECGrid() {\n    const group = useRef();\n\n    useEffect(() => {\n        const segments = 64;\n        const numDivisions = 36;  // Par exemple, pour 36 divisions\n        const increment = 360 / numDivisions;\n\n        const dashMaterialRA = new THREE.LineDashedMaterial({\n            color: 0x00ff00,\n            dashSize: 10,\n            gapSize: 5\n        });\n\n        const dashMaterialDEC = new THREE.LineDashedMaterial({\n            color: 0x0000ff,\n            dashSize: 10,\n            gapSize: 5\n        });\n\n        const createCircleGeometry = (radius) => {\n            const geometry = new THREE.BufferGeometry();\n            const positions = new Float32Array((segments + 1) * 3);\n\n            for (let i = 0; i <= segments; i++) {\n                const theta = (i / segments) * Math.PI * 2;\n                positions[i * 3] = radius * Math.cos(theta);\n                positions[i * 3 + 1] = 0;\n                positions[i * 3 + 2] = radius * Math.sin(theta);\n            }\n\n            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            return geometry;\n        };\n\n        for (let ra = 0; ra < 360; ra += increment) {\n            const circGeom = createCircleGeometry(1000);\n            \n            // Tourner le cercle de 90 degrés autour de l'axe Z pour le positionner dans le plan YX.\n            circGeom.rotateZ(THREE.MathUtils.degToRad(90));\n            \n            // Ensuite, tourner la géométrie autour de l'axe Y par ra degrés.\n            circGeom.rotateY(THREE.MathUtils.degToRad(ra));\n        \n            const circ = new THREE.Line(circGeom, dashMaterialRA);\n            circ.computeLineDistances();\n            group.current.add(circ);\n        }\n        \n\n        for (let dec = -90; dec < 90; dec += increment) {\n            const circGeom = createCircleGeometry(1000*Math.cos(THREE.MathUtils.degToRad(dec) ));\n            const circ = new THREE.Line(circGeom, dashMaterialDEC);\n            circ.translateY(1000*Math.sin(THREE.MathUtils.degToRad(dec)));\n            circ.computeLineDistances();\n            group.current.add(circ);\n        }\n\n    }, []);\n\n    return <group ref={group} />;\n}\n\nexport default RADECGrid;\n","import React,{useRef,useEffect} from 'react';\nimport * as THREE from 'three';\n\nfunction Horizon() {\n    const meshRef = useRef();\n\n    useEffect(() => {\n        if (meshRef.current) {\n            meshRef.current.renderOrder = 1; // Assurez-vous que c'est un numéro plus élevé que les autres objets de votre scène\n        }\n    }, []);\n    const radius=1000;\n    const segments =64;\n    return (\n        <mesh ref={meshRef} rotation={[-Math.PI / 2, 0, 0]}>\n            <ringBufferGeometry attach=\"geometry\" args={[0, radius, segments]} />\n            <meshBasicMaterial \n                attach=\"material\" \n                color={0xffffff} \n                side={THREE.DoubleSide} \n                transparent={true} \n                opacity={0.1}\n                depthWrite={false} // Ajout de cette ligne\n            />\n        </mesh>\n    );\n}\n\nexport default Horizon;\n","import { useThree } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { useState, useEffect } from 'react';\nimport * as THREE from 'three';\n\nfunction CameraControls() {\n  const { camera, gl } = useThree();\n  const [lookAt, setLookAt] = useState(new THREE.Vector3(0, 0, -1));\n\n  useEffect(() => {\n    function handleMouseMove(event) {\n      // Mettez à jour le point lookAt en fonction du mouvement de la souris\n      setLookAt(new THREE.Vector3(event.clientX, event.clientY, 0));\n    }\n\n    // Ajoutez l'eventListener au canvas\n    const canvas = gl.domElement;\n    canvas.addEventListener('mousemove', handleMouseMove);\n\n    // Assurez-vous de nettoyer l'eventListener lorsque le composant est démonté\n    return () => {\n      canvas.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [gl.domElement]);\n\n  useEffect(() => {\n    camera.lookAt(lookAt);\n  }, [lookAt, camera]);\n\n  return <OrbitControls enableZoom={true} />;\n}\n\nexport default CameraControls;\n\n","const degToRad = (degrees) => {\n    return degrees * (Math.PI / 180);\n}\n\nconst hmsToDeg = (hours, minutes, seconds) => {\n    return 15 * (hours + minutes / 60 + seconds / 3600);\n}\n\nconst dmsToDeg = (degrees, minutes, seconds) => {\n    return degrees + minutes / 60 + seconds / 3600;\n}\n\nconst hmsToRad = (hours, minutes, seconds) => {\n    return degToRad(hmsToDeg(hours, minutes, seconds));\n}\n\nconst dmsToRad = (degrees, minutes, seconds) => {\n    return degToRad(dmsToDeg(degrees, minutes, seconds));\n}\n\nexport { degToRad, hmsToDeg, dmsToDeg, hmsToRad, dmsToRad };\n","// SkyContext.js\nimport React, { useState, useEffect } from 'react';\nimport { hmsToRad, dmsToRad } from '../utils/unitUtils';\n\nconst SkyContext = React.createContext();\n\nfunction SkyProvider({ children }) {\n    const [representation, setRepresentation] = useState(\"Equatorial\");\n    const [shownConstellations,setShownConstellations] = useState(\"Oui\");\n    const [currentTime, setCurrentTime] = useState(new Date());\n    const [location, setLocation] = useState({ latitude: null, longitude: null });\n    const [starsData, setStarsData] = useState(null);\n    const [hipToIndex, setHipToIndex] = useState({});\n\n    const [maxShownMagnitude, setMaxShownMagnitude] = useState(6);\n    const [constellationLines, setConstellationLines] = useState([]);\n    const R = 1000; // Rayon de la sphère céleste\n    const toggleRepresentation = () => {\n        if (representation === 'Equatorial') {\n            setRepresentation('Horizontal');\n        } else {\n            setRepresentation('Equatorial');\n        }\n    };\n    const toggleShownConstellations=()=>{\n        console.log(\"Toggle shown Constellations\")\n        if (shownConstellations===\"Oui\") setShownConstellations(\"Non\")\n        else setShownConstellations(\"Oui\")\n    }\n    useEffect(() => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                setLocation({\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude\n                });\n            }, error => {\n                console.error(\"Erreur de géolocalisation:\", error);\n            });\n        } else {\n            console.error(\"Géolocalisation non supportée par ce navigateur.\");\n        }\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCurrentTime(new Date());\n        }, 1000);  // Met à jour l'heure chaque seconde\n\n        return () => clearInterval(interval);  // Nettoie l'intervalle lors du démontage du composant\n    }, []);\n\n    const parseDMS = (dms) => {\n        const parts = dms.split(/\\s+/);\n        return parts.map(part => parseFloat(part));\n    };\n\n    const parseHMS = (hms) => {\n        const parts = hms.split(/\\s+/);\n        return parts.map(part => parseFloat(part));\n    };\n\n    useEffect(() => {\n        fetch(`${process.env.PUBLIC_URL}/datas/hip.tsv`)\n\n            .then(response => response.text())\n            .then(data => {\n                let minRA = Infinity;\n                let maxRA = -Infinity;\n                let minDEC = Infinity;\n                let maxDEC = -Infinity;\n\n                const lines = data.split('\\n').filter(line => !line.startsWith('#') && line.trim() !== '');\n            \n                const coords = [];\n                const newMagnitudes = [];\n\n                const RA_INDEX = 1;\n                const DEC_INDEX = 2;\n                const MAG_INDEX = 3;\n\n                // Créez une liste de tous les numéros HIP présents dans le fichier\n                const presentHips = lines.map(line => parseInt(line.split('|')[0])).sort((a, b) => a - b);\n\n                // Créez une liste complète de 1 à 118322\n                const allHips = Array.from({ length: 118322 }, (_, i) => i + 1);\n\n                // Trouvez les numéros HIP manquants\n                const missingHips = allHips.filter(hip => !presentHips.includes(hip));\n\n                console.log(\"Missing HIP numbers:\", missingHips);\n\n                lines.forEach((line, index) => {\n                    const parts = line.split('|');\n                    const hipNumber = parseInt(parts[0], 10);\n                    hipToIndex[hipNumber] = index;\n                    const raParts = parseHMS(parts[RA_INDEX]);\n                    const decParts = parseDMS(parts[DEC_INDEX]);\n\n                    const ra = hmsToRad(...raParts);\n                    const dec = dmsToRad(...decParts);\n                    const mag = parseFloat(parts[MAG_INDEX]);\n\n                    if (ra < minRA) minRA = ra;\n                    if (ra > maxRA) maxRA = ra;\n                    if (dec < minDEC) minDEC = dec;\n                    if (dec > maxDEC) maxDEC = dec;\n\n                    if (!isNaN(mag)) {\n                        newMagnitudes.push(mag);\n                    } else {\n                        console.error(\"Invalid magnitude value:\", parts[MAG_INDEX]);\n                    }\n\n                    const x = R * Math.cos(dec) * Math.cos(ra);\n                    const z = R * Math.cos(dec) * Math.sin(ra);\n                    const y = R * Math.sin(dec);\n\n                    if (!isNaN(x) && !isNaN(y) && !isNaN(z)) {\n                        coords.push(x, y, z);\n                    } else {\n                        console.error(\"Problem with HIP=\" + parts[0]);\n                    }\n\n                    // Vérifier la taille des tableaux de données\n                    if ((coords.length / 3) !== newMagnitudes.length) {\n                        console.error(\"Mismatch detected at line index:\", index);\n                        console.error(\"Line content:\", line);\n                        throw new Error(\"Mismatch in data arrays\"); // This will stop further processing\n                    }\n                });\n\n\n                console.log(\"Nb étoiles:\" + newMagnitudes.length);\n                console.log(\"RA Range:\", minRA, \"-\", maxRA);\n                console.log(\"DEC Range:\", minDEC, \"-\", maxDEC);\n\n                // Vérifier la gamme de magnitudes\n                const validMagnitudes = newMagnitudes.filter(mag => !isNaN(mag));\n\n                const minMagnitude = Math.min(...validMagnitudes);\n                const maxMagnitude = Math.max(...validMagnitudes);\n                console.log(\"Magnitude Range:\", minMagnitude, \"-\", maxMagnitude);\n\n                // Afficher un échantillon des étoiles\n                // console.log(\"Sample stars:\", lines.slice(0, 10));\n\n\n\n                const starsData = {\n                    vertices: coords,\n                    magnitudes: newMagnitudes,\n                    hipToIndex: hipToIndex\n                };\n                // Stockez les données dans le contexte\n                setStarsData(starsData);\n            });\n\n            fetch(`${process.env.PUBLIC_URL}/datas/constellation_line_hip.csv`)\n           \n            .then(response => response.text())\n            .then(data => {\n                const lines = data.split('\\n').filter(line => !line.startsWith('#') && line.trim() !== '');\n                const parsedLines = lines.map(line => {\n                    // console.log(\"Line=\", line)\n                    const parts = line.split(',');\n                    return {\n                        abbreviation: parts[0],\n                        group: parts[1],\n                        abbreviationGroup: parts[2],\n                        startStar: parseInt(parts[3]),\n                        endStar: parseInt(parts[4])\n                    };\n                });\n\n                setConstellationLines(parsedLines);\n            });\n    }, []);\n\n\n    return (\n        <SkyContext.Provider value={{ shownConstellations,toggleShownConstellations,maxShownMagnitude, setMaxShownMagnitude, starsData, setStarsData, representation, setRepresentation, currentTime, location, toggleRepresentation, constellationLines }}>\n            {children}\n        </SkyContext.Provider>\n    );\n}\n\nexport { SkyContext, SkyProvider };","import { useEffect, useRef, useContext } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { SkyContext } from '../contexts/Skycontext';\n\n\nfunction Stars({rotation}) {\n    const { scene } = useThree();\n    const { maxShownMagnitude,  starsData } = useContext(SkyContext);\n\n    // Créez une référence pour le groupe\n    const starGroupRef = useRef(new THREE.Group());\n\n    useEffect(() => {\n        starGroupRef.current.rotation.y = rotation.y;\n        starGroupRef.current.rotation.x = rotation.x;\n    }, [rotation]);\n\n    useEffect(() => {\n        if (!starsData) return;\n        console.log(\"Mise à jour maxShownMagnitude= \" + maxShownMagnitude);\n        const geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(starsData.vertices, 3));\n        geometry.setAttribute('magnitude', new THREE.Float32BufferAttribute(starsData.magnitudes, 1));\n\n        function createStarTexture() {\n            const canvas = document.createElement('canvas');\n            canvas.width = 64;  // Doubler la résolution pour un dégradé plus doux\n            canvas.height = 64;\n            const ctx = canvas.getContext('2d');\n\n            // Créer un gradient radial\n            const gradient = ctx.createRadialGradient(32, 32, 8, 32, 32, 32);\n            gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            const texture = new THREE.Texture(canvas);\n            texture.needsUpdate = true;\n            return texture;\n        }\n\n        const shaderMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                starTexture: { value: createStarTexture() },\n                maxMagnitude: { value: maxShownMagnitude }\n            },\n            vertexShader: `\n                attribute float magnitude;\n                uniform float maxMagnitude;\n                varying float vMagnitude;\n                void main() {\n                    vMagnitude = magnitude;\n                    gl_PointSize = 1.0 + 19.0 * (1.0 - vMagnitude / maxMagnitude);\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n            fragmentShader: `\n                uniform sampler2D starTexture;\n                uniform float maxMagnitude;\n                varying float vMagnitude;\n                void main() {\n                    if (vMagnitude > maxMagnitude) {\n                        discard;\n                    }\n                    gl_FragColor = texture2D(starTexture, gl_PointCoord);\n                }\n            `,\n            transparent: true,\n            depthTest: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        });\n        // Supprimez tous les enfants existants de starGroupRef.current\n        while (starGroupRef.current.children.length > 0) {\n            starGroupRef.current.remove(starGroupRef.current.children[0]);\n        }\n        const points = new THREE.Points(geometry, shaderMaterial);\n        starGroupRef.current.add(points);\n        scene.add(starGroupRef.current);\n\n        return () => {\n            scene.remove(starGroupRef.current);\n        };\n\n    }, [starsData, scene, maxShownMagnitude]);\n\n    return null;\n}\n\nexport default Stars;\n","import { useEffect, useRef, useContext } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { SkyContext } from '../contexts/Skycontext';\n/**\n * \n * @param {*} param0 \n * @returns \n */\nfunction Constellations({rotation}) {\n    const { scene } = useThree();\n    const { starsData, constellationLines } = useContext(SkyContext);\n\n    // Créez une référence pour le groupe\n    const constellationGroupRef = useRef(new THREE.Group());\n\n    useEffect(() => {\n        constellationGroupRef.current.rotation.y = rotation.y;\n        constellationGroupRef.current.rotation.x = rotation.x;\n    }, [rotation]);\n\n    useEffect(() => {\n        if (!starsData || !constellationLines) return;\n\n        const material = new THREE.LineBasicMaterial({ color: 0xFFFFFF });  // Une ligne blanche pour les constellations\n        constellationLines.forEach(line => {\n            const startStarIndex = starsData.hipToIndex[line.startStar] * 3;\n            const endStarIndex = starsData.hipToIndex[line.endStar] * 3;\n\n            //console.log(\"Start=\" + line.startStar + \" \" + starsData.vertices[startStarIndex] + \",\" + starsData.vertices[startStarIndex + 1] + \",\" + starsData.vertices[startStarIndex + 2]);\n            //console.log(\"End=\" + line.endStar + \" \" + starsData.vertices[endStarIndex] + \",\" + starsData.vertices[endStarIndex + 1] + \",\" + starsData.vertices[endStarIndex + 2]);\n\n            if (starsData.vertices[startStarIndex] !== undefined && starsData.vertices[endStarIndex] !== undefined) {\n                const startStarCoords = new THREE.Vector3(\n                    starsData.vertices[startStarIndex],\n                    starsData.vertices[startStarIndex + 1],\n                    starsData.vertices[startStarIndex + 2]\n                );\n\n                const endStarCoords = new THREE.Vector3(\n                    starsData.vertices[endStarIndex],\n                    starsData.vertices[endStarIndex + 1],\n                    starsData.vertices[endStarIndex + 2]\n                );\n\n                const geometry = new THREE.BufferGeometry().setFromPoints([startStarCoords, endStarCoords]);\n                const line = new THREE.Line(geometry, material);\n                constellationGroupRef.current.add(line);\n            }\n        });\n\n        // Ajoutez le groupe contenant les lignes à la scène\n        scene.add(constellationGroupRef.current);\n\n        return () => {\n            scene.remove(constellationGroupRef.current);\n        };\n\n    }, [starsData, scene, constellationLines]);\n\n    return null;\n}\n\nexport default Constellations;\n","import React, { useState, useEffect,useContext } from 'react';\nimport Stars from './Stars';\nimport Constellations from './Constellations';\nimport { getSiderealTime } from '../utils/astroUtils';\nimport * as THREE from 'three';\nimport { SkyContext } from '../contexts/Skycontext';\n/**\n * \n * @param {*} param0 \n * @returns \n */\nfunction Sky() {\n    const [rotation, setRotation] = useState({ x: 0, y: 0 });\n    const { shownConstellations,representation,location } = useContext(SkyContext);\n\n    useEffect(() => {\n        console.log(\"Changement de representation\")\n        if (representation === 'Equatorial') {\n            setRotation({ x: 0, y: 0 });\n        } else if (representation === 'Horizontal') {\n            const longitude = location.longitude;\n            const latitude = location.latitude;\n            const LST = getSiderealTime(longitude);\n            const LSTinRadians = THREE.MathUtils.degToRad(LST);\n            const inclination = THREE.MathUtils.degToRad(90 - latitude);\n            setRotation({ x: inclination, y: LSTinRadians });\n        }\n    }, [representation, location]);\n\n    return (\n        <>\n            {/* Affiche les étoiles. */}\n            <Stars rotation={rotation} />\n            {/* Affiche les constellations. */}\n            {shownConstellations===\"Oui\" && <Constellations rotation={rotation} />}\n        </>\n    );\n}\n\nexport default Sky;\n","import { degToRad,radToDeg } from \"three/src/math/MathUtils\";\n/**\n * Calcule le temps sidéral local (LST) pour une longitude donnée.\n * \n * @param {number} longitude - La longitude en degrés pour laquelle le temps sidéral sera calculé.\n * @return {number} Le temps sidéral local (LST) en degrés.\n */\nexport function getSiderealTime(longitude) {\n    // Obtener la date et l'heure actuelles\n    const now = new Date();\n\n    // Calculer le nombre de jours écoulés depuis le début du J2000.0\n    const centuryStart = new Date(Date.UTC(2000, 0, 1, 12)); // 1er janvier 2000, 12h UT\n    const daysSinceJ2000 = (now - centuryStart) / (1000 * 60 * 60 * 24);\n\n    // Calculez le temps sidéral vert (GST) en utilisant une formule simplifiée\n    let GST = 280.16 + 360.9856235 * daysSinceJ2000;\n    GST = GST % 360; // Ramenez-le à l'intervalle [0, 360°]\n\n    // Convertir le GST en temps sidéral local (LST) en ajoutant la longitude\n    let LST = GST + longitude;\n    while (LST < 0) LST += 360;\n    while (LST > 360) LST -= 360;\n\n    return LST;\n}\n\n/**\n * Calcule l'heure angulaire d'un astre en fonction du temps sidéral local et de son ascension droite.\n * \n * @param {number} lst - Le temps sidéral local en degrés.\n * @param {number} ra - L'ascension droite de l'astre en degrés.\n * @return {number} L'heure angulaire en degrés.\n */\nfunction calculateHourAngle(lst, ra) {\n    let H = lst - ra;\n\n    // Ajustement pour s'assurer que H est dans l'intervalle [0, 360°] ou [0, -360°].\n    while (H >= 360) {\n        H -= 360;\n    }\n    while (H < 0) {\n        H += 360;\n    }\n\n    return H;\n}\n\n/**\n * Convertit des coordonnées équatoriales à horizontales.\n * \n * @param {number} dec - La déclinaison de l'astre en degrés.\n * @param {number} H - L'heure angulaire en degrés.\n * @param {number} latitude - La latitude de l'observateur en degrés.\n * @return {object} Un objet contenant les coordonnées horizontales : azimut (en degrés) et altitude (en degrés).\n */\nfunction equatorialToHorizontal(dec, H, latitude) {\n    // Calculer l'altitude de l'astre\n    const sinAlt = Math.sin(degToRad(dec)) * Math.sin(degToRad(latitude)) + \n                   Math.cos(degToRad(dec)) * Math.cos(degToRad(latitude)) * Math.cos(degToRad(H));\n    const alt = radToDeg(Math.asin(sinAlt));\n    \n    // Calculer l'azimut de l'astre\n    const cosA = (Math.sin(degToRad(dec)) - Math.sin(degToRad(alt)) * Math.sin(degToRad(latitude))) / \n                 (Math.cos(degToRad(alt)) * Math.cos(degToRad(latitude)));\n    const az = radToDeg(Math.acos(cosA));\n    \n    return { azimuth: az, altitude: alt };\n}\n\n","import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport RADECGrid from './RADECGrid';\nimport Horizon from './Horizon';\nimport CameraControls from '../CameraControls';\nimport Sky from './Sky';\n\n/*\nEn ce qui concerne les directions des axes dans Three.js:\n\nL'axe X est dirigé vers la droite.\nL'axe Y est dirigé vers le haut.\nL'axe Z est dirigé en avant, hors de l'écran.\nDonc, dans votre configuration:\n\nL'axe X (rouge dans axesHelper) pointe vers la droite.\nL'axe Y (vert dans axesHelper) pointe vers le haut.\nL'axe Z (bleu dans axesHelper) pointe directement hors de l'écran vers vous.\nLorsque vous utilisez axesHelper, il affiche des lignes représentant ces axes dans ces couleurs. Le rouge est pour X, le vert pour Y, et le bleu pour Z.\n*/\nfunction SkyDome() {\n    return (\n        <Canvas style={{ background: '#001122' }} >\n            <orthographicCamera position={[0, 0, 0]} left={-1000} right={1000} top={1000} bottom={-1000} near={0.1} far={1000} />\n            \n            {/* Afficher le ciel nocturne. */}\n            <Sky />\n\n            {/* Affiche l'horizon. */}\n            <Horizon />\n\n            {/* Affiche la grille RA/DEC. */}\n            <RADECGrid />\n\n            {/* Affiche les aides pour les axes. */}\n            <axesHelper args={[500]} />\n\n            {/* Éclaire la scène avec une lumière ambiante. */}\n            <ambientLight intensity={0.5} />\n\n            {/* Ajoute une lumière directionnelle pointant vers la position spécifiée. */}\n            <directionalLight position={[0, 0, 5]} intensity={1} />\n\n            {/* Contrôles pour la caméra. */}\n            <CameraControls />\n        </Canvas>\n    );\n}\n\nexport default SkyDome;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null, errorInfo: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Mettez à jour l'état pour que le prochain rendu affiche le remplacement d'UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Vous pouvez également enregistrer l'erreur dans un service de reporting d'erreurs\n    console.error(\"Uncaught error:\", error, errorInfo);\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // Vous pouvez rendre n'importe quelle interface utilisateur de remplacement\n      return (\n        <div>\n          <h1>Quelque chose s'est mal passé.</h1>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n\n    // Si il n'y a pas d'erreur, renvoyer les enfants normalement\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useContext, useState } from 'react';\nimport './Sidebar.css';\nimport { SkyContext } from '../contexts/Skycontext';\n\nfunction Sidebar() {\n    const { maxShownMagnitude, setMaxShownMagnitude, representation, toggleRepresentation, shownConstellations, toggleShownConstellations } = useContext(SkyContext);\n\n    // Utilisation d'un état local pour suivre la valeur du curseur\n    const [sliderValue, setSliderValue] = useState(maxShownMagnitude);\n\n    const handleSliderChange = (event) => {\n        const newMagnitude = parseFloat(event.target.value);\n        setSliderValue(newMagnitude);\n        setMaxShownMagnitude(newMagnitude);\n    };\n   \n    return (\n        <div className=\"sidebar\">\n            <h2 className=\"representation-title\">{representation}</h2>\n            <button onClick={toggleRepresentation}>Basculer la représentation</button>\n            <h2 className=\"constellations-title\">Constellations: {shownConstellations}</h2>\n            <div\n                className={`toggle-btn ${shownConstellations === 'Oui' ? 'on' : 'off'}`}\n                onClick={toggleShownConstellations}\n            >\n                <div className=\"toggle-indicator\"></div>\n            </div>\n\n            <div className=\"magnitude-slider\">\n                <label>Magnitude maximale affichée: {sliderValue}</label>\n                <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"10\"\n                    step=\"0.1\"\n                    value={sliderValue}\n                    onChange={handleSliderChange}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Sidebar;\n","// Header.js\nimport React, { useContext } from 'react';\nimport './Header.css';\nimport { SkyContext } from '../contexts/Skycontext';\n\nfunction Header({deviceType}) {\n    const { currentTime, location } = useContext(SkyContext);\n    //console.log(\"Location: \", location)\n\n    const offsetMinutes = currentTime.getTimezoneOffset();\n    const offsetHours = offsetMinutes / 60;\n\n    return (\n        <div className=\"header\">\n          {deviceType !== \"mobile\" && <h1 className=\"header-title\">SkySphereJS</h1>}\n            <div className=\"right-section\">\n                <span className=\"location\">\n                    {location.latitude && location.longitude ?\n                        `Lat: ${location.latitude.toFixed(2)}, Long: ${location.longitude.toFixed(2)}` :\n                        \"Localisation non disponible\"}\n                </span>\n                <span className=\"time\"> {currentTime.toLocaleTimeString()} UTC {offsetHours >= 0 ? '+' : ''}{offsetHours}</span>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SkyDome from './components/SkyDome';\nimport ErrorBoundary from './ErrorBoundary';\nimport Sidebar from './components/Sidebar';\nimport Header from './components/Header';\nimport { SkyProvider } from './contexts/Skycontext';\n\nfunction App() {\n  const [deviceType, setDeviceType] = useState(getDeviceType(window.innerWidth));\n/**\n  * \n  * @param {*} width \n  * @returns \n  */\nfunction getDeviceType(width) {\n  console.log(\"Width=\"+width);\n  if (width < 768) {\n    return 'mobile';\n  } else if (width <= 1180) {\n    return 'tablette';\n  } else {\n    return 'ordinateur';\n  }\n}\nuseEffect(() => {\n  const handleResize = () => {\n    setDeviceType(getDeviceType(window.innerWidth));\n  };\n\n  window.addEventListener('resize', handleResize);\n  return () => {\n    window.removeEventListener('resize', handleResize);\n  };\n}, []);\n\n\n  return (\n    <div className={`App ${deviceType === \"mobile\" ? \"mobile\" : \"\"}`}>\n      <SkyProvider>\n        <ErrorBoundary>\n          <Header deviceType={deviceType} />\n          <div className=\"content\">\n            <SkyDome />\n          </div>\n          {deviceType !== \"mobile\" && <Sidebar />}\n        </ErrorBoundary>\n      </SkyProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n"],"sourceRoot":""}